{"ast":null,"code":"import { firestore } from './config.ts';\nimport { collection, doc, getDocs, deleteDoc } from 'firebase/firestore';\nexport async function firestoreReadText(callback) {\n  try {\n    const querySnapshot = await getDocs(collection(firestore, \"task\"));\n    await querySnapshot.forEach(doc => {\n      if (doc.exists) {\n        callback(doc.id, doc.data().text, null);\n        this.setState(prevState => ({\n          users: [...prevState.users, doc.data().text]\n        }));\n      } else {\n        // this.setState({user: null});\n        console.log(\"No data\");\n      }\n    });\n  } catch (err) {\n    callback(null, null, err);\n  }\n}\nexport async function firestoreDeleteText(id, callback) {\n  try {\n    await deleteDoc(doc(firestore, \"task\", id));\n    callback(null);\n  } catch (err) {\n    callback(err);\n  }\n}","map":{"version":3,"names":["firestore","collection","doc","getDocs","deleteDoc","firestoreReadText","callback","querySnapshot","forEach","exists","id","data","text","setState","prevState","users","console","log","err","firestoreDeleteText"],"sources":["/Users/eloyyeluo/projects/todolist/todolist/src/FirebaseAPI.ts"],"sourcesContent":["import {firestore} from './config.ts';\nimport { addDoc, collection, setDoc, doc, getDocs, getDoc, where, endAt, startAt, deleteDoc, updateDoc, arrayUnion, arrayRemove } from 'firebase/firestore';\n\nexport async function firestoreReadText(callback) {\n    try {\n        const querySnapshot = await getDocs(collection(firestore, \"task\"));\n        await querySnapshot.forEach((doc) => {\n            if (doc.exists) {\n                callback(doc.id, doc.data().text, null)\n                this.setState(prevState => ({\n                    users: [...prevState.users, doc.data().text]\n                  }));\n            } else {\n                // this.setState({user: null});\n                console.log(\"No data\");\n            }\n        })\n    } catch(err) {\n        callback(null, null, err)\n    }\n}\n\nexport async function firestoreDeleteText(id, callback) {\n    try {\n        await deleteDoc(doc(firestore, \"task\", id));\n        callback(null)\n    } catch(err) {\n        callback(err)\n    }\n}\n"],"mappings":"AAAA,SAAQA,SAAR,QAAwB,aAAxB;AACA,SAAiBC,UAAjB,EAAqCC,GAArC,EAA0CC,OAA1C,EAAkFC,SAAlF,QAAuI,oBAAvI;AAEA,OAAO,eAAeC,iBAAf,CAAiCC,QAAjC,EAA2C;EAC9C,IAAI;IACA,MAAMC,aAAa,GAAG,MAAMJ,OAAO,CAACF,UAAU,CAACD,SAAD,EAAY,MAAZ,CAAX,CAAnC;IACA,MAAMO,aAAa,CAACC,OAAd,CAAuBN,GAAD,IAAS;MACjC,IAAIA,GAAG,CAACO,MAAR,EAAgB;QACZH,QAAQ,CAACJ,GAAG,CAACQ,EAAL,EAASR,GAAG,CAACS,IAAJ,GAAWC,IAApB,EAA0B,IAA1B,CAAR;QACA,KAAKC,QAAL,CAAcC,SAAS,KAAK;UACxBC,KAAK,EAAE,CAAC,GAAGD,SAAS,CAACC,KAAd,EAAqBb,GAAG,CAACS,IAAJ,GAAWC,IAAhC;QADiB,CAAL,CAAvB;MAGH,CALD,MAKO;QACH;QACAI,OAAO,CAACC,GAAR,CAAY,SAAZ;MACH;IACJ,CAVK,CAAN;EAWH,CAbD,CAaE,OAAMC,GAAN,EAAW;IACTZ,QAAQ,CAAC,IAAD,EAAO,IAAP,EAAaY,GAAb,CAAR;EACH;AACJ;AAED,OAAO,eAAeC,mBAAf,CAAmCT,EAAnC,EAAuCJ,QAAvC,EAAiD;EACpD,IAAI;IACA,MAAMF,SAAS,CAACF,GAAG,CAACF,SAAD,EAAY,MAAZ,EAAoBU,EAApB,CAAJ,CAAf;IACAJ,QAAQ,CAAC,IAAD,CAAR;EACH,CAHD,CAGE,OAAMY,GAAN,EAAW;IACTZ,QAAQ,CAACY,GAAD,CAAR;EACH;AACJ"},"metadata":{},"sourceType":"module"}